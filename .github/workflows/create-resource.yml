name: Create Resources

on:
  push:
    paths:
      - 'resource.json'
  workflow_dispatch:

jobs:
  create-resources:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Install Databricks CLI
    - name: Install Databricks CLI
      run: |
        sudo apt-get install -y python3-pip
        pip3 install databricks-cli

    # Configure Databricks CLI
    - name: Configure Databricks CLI
      run: |
        databricks configure --token <<< "${{ secrets.DATABRICKS_HOST }}\n${{ secrets.DATABRICKS_TOKEN }}"

    # Parse the JSON file and set environment variables using Python
    - name: Parse JSON file with Python
      id: parse_json
      run: |
        cat <<EOF > parse_json.py
import json
import os

with open('resource.json') as f:
    data = json.load(f)

platform_type = data.get('PlatformType')
os.environ['platform_type'] = platform_type
print(f"platform_type={platform_type}")

resources = data.get('Resources', [])
num_resources = len(resources)
os.environ['num_resources'] = str(num_resources)
print(f"num_resources={num_resources}")

for i, resource in enumerate(resources):
    resource_type = resource.get('ResourceType')
    resource_name = resource.get('ResourceName')
    resource_config = json.dumps(resource)
    os.environ[f'resource_{i}_type'] = resource_type
    os.environ[f'resource_{i}_name'] = resource_name
    os.environ[f'resource_{i}_config'] = resource_config
    print(f"resource_{i}_type={resource_type}")
    print(f"resource_{i}_name={resource_name}")
    print(f"resource_{i}_config={resource_config}")
EOF
        python3 parse_json.py

    - name: Configure Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11

    - name: Configure AWS credentials
      if: env.platform_type == 'AWS'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create AWS Resources
      if: env.platform_type == 'AWS'
      run: |
        num_resources=${{ env.num_resources }}
        rm -f main.tf
        
        for ((i=0; i<$num_resources; i++)); do
          resource_type=$(eval echo "\${resource_${i}_type}")
          resource_name=$(eval echo "\${resource_${i}_name}")
          resource_config=$(eval echo "\${resource_${i}_config}")

          echo "Creating $resource_type named $resource_name"

          case $resource_type in
            S3)
              echo "resource \"aws_s3_bucket\" \"$resource_name\" {
                bucket = \"$resource_name\"
              }" >> main.tf
              ;;
            EC2)
              ami=$(echo $resource_config | python3 -c "import sys, json; print(json.load(sys.stdin)['Ami'])")
              instance_type=$(echo $resource_config | python3 -c "import sys, json; print(json.load(sys.stdin)['InstanceType'])")
              echo "resource \"aws_instance\" \"$resource_name\" {
                ami           = \"$ami\"
                instance_type = \"$instance_type\"
              }" >> main.tf
              ;;
            SNS)
              echo "resource \"aws_sns_topic\" \"$resource_name\" {
                name = \"$resource_name\"
              }" >> main.tf
              ;;
            *)
              echo "Unsupported resource type: $resource_type"
              exit 1
              ;;
          esac
        done

        terraform init
        terraform apply -auto-approve

    - name: Process Databricks
      if: ${{ env.platform_type == 'DATABRICK' }}
      run: |
        export DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST }}
        export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN }}

        num_resources=${{ env.num_resources }}

        for ((i=0; i<$num_resources; i++)); do
          resource_type=$(eval echo "\${resource_${i}_type}")
          resource_name=$(eval echo "\${resource_${i}_name}")
          resource_config=$(eval echo "\${resource_${i}_config}")

          echo "Creating Databricks resource: Type=$resource_type, Name=$resource_name"

          case $resource_type in
            CLUSTER)
              cluster_config=$(echo $resource_config | python3 -c "import sys, json; print(json.load(sys.stdin)['ClusterConfig'])")
              echo "Setting up Databricks Cluster ${resource_name} with config ${cluster_config}"
              databricks clusters create --json "$cluster_config"
              ;;
            JOB)
              job_config=$(echo $resource_config | python3 -c "import sys, json; print(json.load(sys.stdin)['JobConfig'])")
              echo "Setting up Databricks Job ${resource_name} with config ${job_config}"
              databricks jobs create --json "$job_config"
              ;;
            *)
              echo "Unsupported Databricks resource type: $resource_type"
              exit 1
              ;;
          esac
        done

    - name: Process Snowflake
      if: ${{ env.platform_type == 'DATAFLAKE' }}
      run: |
        echo "Processing Snowflake resources..."
        # Add your Snowflake related commands here
