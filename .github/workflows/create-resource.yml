name: Create Resources

on:
  push:
    paths:
      - 'resource.json'
  workflow_dispatch:

jobs:
  create-resources:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Parse JSON file
      id: parse_json
      run: |
        platform_type=$(jq -r '.PlatformType' resource.json)
        echo "::set-output name=platform_type::$platform_type"
        resources=$(jq '.Resources | length' resource.json)
        for ((i=0; i<$resources; i++)); do
          resource=$(jq -c .Resources[$i] resource.json)
          resource_type=$(echo $resource | jq -r '.ResourceType')
          resource_name=$(echo $resource | jq -r '.ResourceName')
          echo "::set-output name=resource_${i}_type::$resource_type"
          echo "::set-output name=resource_${i}_name::$resource_name"
          echo "::set-output name=resource_${i}_config::$(echo $resource)"
        done
        echo "::set-output name=num_resources::$resources"

    - name: Configure Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11

    - name: Create AWS Resources
      if: ${{ steps.parse_json.outputs.platform_type == 'AWS' }}
      run: |
        num_resources=${{ steps.parse_json.outputs.num_resources }}
        for ((i=0; i<$num_resources; i++)); do
          resource_type=${{ steps.parse_json.outputs['resource_' + i + '_type'] }}
          resource_name=${{ steps.parse_json.outputs['resource_' + i + '_name'] }}
          resource_config=${{ steps.parse_json.outputs['resource_' + i + '_config'] }}
          
          echo "Creating $resource_type named $resource_name"
          
          case $resource_type in
            S3)
              echo "resource \"aws_s3_bucket\" \"$resource_name\" {
                bucket = \"$resource_name\"
              }" > main.tf
              ;;
            EC2)
              ami=$(echo $resource_config | jq -r '.Ami')
              instance_type=$(echo $resource_config | jq -r '.InstanceType')
              echo "resource \"aws_instance\" \"$resource_name\" {
                ami           = \"$ami\"
                instance_type = \"$instance_type\"
              }" > main.tf
              ;;
            SNS)
              echo "resource \"aws_sns_topic\" \"$resource_name\" {
                name = \"$resource_name\"
              }" > main.tf
              ;;
            *)
              echo "Unsupported resource type: $resource_type"
              exit 1
              ;;
          esac

          terraform init
          terraform apply -auto-approve
        done

    # Handling for Databricks and Snowflake
    - name: Process Databricks and Snowflake
      if: ${{ steps.parse_json.outputs.platform_type == 'DATABRICK' || steps.parse_json.outputs.platform_type == 'DATAFLAKE' }}
      run: |
        platform_type=${{ steps.parse_json.outputs.platform_type }}
        if [[ "$platform_type" == "DATABRICK" ]]; then
          echo "Processing Databricks resources..."
          # Add your Databricks related commands here
        elif [[ "$platform_type" == "DATAFLAKE" ]]; then
          echo "Processing Snowflake resources..."
          # Add your Snowflake related commands here
        fi
