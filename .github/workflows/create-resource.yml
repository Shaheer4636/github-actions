name: Create Resources

on:
  push:
    paths:
      - 'resource.json'
  workflow_dispatch:

jobs:
  create-resources:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install and Upgrade Python Packages
      run: |
        sudo apt-get install -y python3-pip
        pip3 install --upgrade "urllib3<2" "chardet<4" requests

    - name: Install Databricks CLI
      run: |
        pip3 install databricks-cli

    - name: Configure Databricks CLI using expect
      run: |
        sudo apt-get install -y expect
        expect <<EOF
        spawn databricks configure --token
        expect "Databricks Host (should begin with https://):"
        send "${{ secrets.DATABRICKS_HOST }}\r"
        expect "Token:"
        send "${{ secrets.DATABRICKS_TOKEN }}\r"
        expect eof
        EOF

    - name: Verify Databricks CLI Configuration
      run: |
        databricks clusters list

    - name: Parse JSON file and set environment variables
      id: parse_json
      run: |
        python3 <<EOF
        import json
        import os

        with open('resource.json') as f:
            data = json.load(f)

        os.environ['platform_type'] = data['PlatformType']
        print(f"::set-env name=platform_type::{data['PlatformType']}")

        resources = data['Resources']
        os.environ['num_resources'] = str(len(resources))
        print(f"::set-env name=num_resources::{len(resources)}")

        for i, resource in enumerate(resources):
            os.environ[f"resource_{i}_type"] = resource['ResourceType']
            os.environ[f"resource_{i}_name"] = resource['ResourceName']
            os.environ[f"resource_{i}_config"] = json.dumps(resource)

            print(f"::set-env name=resource_{i}_type::{resource['ResourceType']}")
            print(f"::set-env name=resource_{i}_name::{resource['ResourceName']}")
            print(f"::set-env name=resource_{i}_config::{json.dumps(resource)}")

            print(f"Resource {i}: type={resource['ResourceType']}, name={resource['ResourceName']}, config={resource}")
        EOF

    - name: Configure Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11

    - name: Create AWS Resources
      if: env.platform_type == 'AWS'
      run: |
        num_resources=${{ env.num_resources }}
        rm -f main.tf   # Ensure main.tf is clean before starting

        for ((i=0; i<$num_resources; i++)); do
          resource_type=$(eval echo "\${resource_${i}_type}")
          resource_name=$(eval echo "\${resource_${i}_name}")
          resource_config=$(eval echo "\${resource_${i}_config}")

          echo "Creating $resource_type named $resource_name"

          case $resource_type in
            S3)
              echo "resource \"aws_s3_bucket\" \"$resource_name\" {
                bucket = \"$resource_name\"
              }" >> main.tf
              ;;
            EC2)
              ami=$(echo $resource_config | jq -r '.Ami')
              instance_type=$(echo $resource_config | jq -r '.InstanceType')
              echo "resource \"aws_instance\" \"$resource_name\" {
                ami           = \"$ami\"
                instance_type = \"$instance_type\"
              }" >> main.tf
              ;;
            SNS)
              echo "resource \"aws_sns_topic\" \"$resource_name\" {
                name = \"$resource_name\"
              }" >> main.tf
              ;;
            *)
              echo "Unsupported resource type: $resource_type"
              exit 1
              ;;
          esac
        done

        terraform init
        terraform apply -auto-approve

    - name: Process Databricks
      if: ${{ env.platform_type == 'DATABRICK' }}
      run: |
        num_resources=${{ env.num_resources }}

        for ((i=0; i<$num_resources; i++)); do
          resource_type=$(eval echo "\${resource_${i}_type}")
          resource_name=$(eval echo "\${resource_${i}_name}")
          resource_config=$(eval echo "\${resource_${i}_config}")

          echo "Creating Databricks resource: Type=$resource_type, Name=$resource_name"

          case $resource_type in
            CLUSTER)
              cluster_config=$(echo $resource_config | jq -r '.ClusterConfig')
              echo "Setting up Databricks Cluster ${resource_name} with config ${cluster_config}"
              databricks clusters create --json "$cluster_config"
              ;;
            JOB)
              job_config=$(echo $resource_config | jq -r '.JobConfig')
              echo "Setting up Databricks Job ${resource_name} with config ${job_config}"
              databricks jobs create --json "$job_config"
              ;;
            *)
              echo "Unsupported Databricks resource type: $resource_type"
              exit 1
              ;;
          esac
        done

    - name: Process Snowflake
      if: ${{ env.platform_type == 'DATAFLAKE' }}
      run: |
        echo "Processing Snowflake resources..."
        # Add your Snowflake related commands here
